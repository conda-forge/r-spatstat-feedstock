{% set version = "3.3-1" %}
{% set posix = 'm2-' if win else '' %}

package:
  name: r-spatstat
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/spatstat_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/spatstat/spatstat_{{ version }}.tar.gz
  sha256: 7de065fd2841e63d175679ca34d349139986c8979da71e67d3db95ebf15ed926

build:
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
    - cross-r-base {{ r_base }}    # [build_platform != target_platform]
    - r-spatstat.data >=3.1_4      # [build_platform != target_platform]
    - r-spatstat.explore >=3.3_3   # [build_platform != target_platform]
    - r-spatstat.geom >=3.3_4      # [build_platform != target_platform]
    - r-spatstat.linnet >=3.2_2    # [build_platform != target_platform]
    - r-spatstat.model >=3.3_3     # [build_platform != target_platform]
    - r-spatstat.random >=3.3_2    # [build_platform != target_platform]
    - r-spatstat.univar >=3.1_1    # [build_platform != target_platform]
    - r-spatstat.utils >=3.1_1     # [build_platform != target_platform]
  host:
    - r-base
    - r-spatstat.data >=3.1_4
    - r-spatstat.explore >=3.3_3
    - r-spatstat.geom >=3.3_4
    - r-spatstat.linnet >=3.2_2
    - r-spatstat.model >=3.3_3
    - r-spatstat.random >=3.3_2
    - r-spatstat.univar >=3.1_1
    - r-spatstat.utils >=3.1_1
  run:
    - r-base
    - r-spatstat.data >=3.1_4
    - r-spatstat.explore >=3.3_3
    - r-spatstat.geom >=3.3_4
    - r-spatstat.linnet >=3.2_2
    - r-spatstat.model >=3.3_3
    - r-spatstat.random >=3.3_2
    - r-spatstat.univar >=3.1_1
    - r-spatstat.utils >=3.1_1

test:
  commands:
    - $R -e "library('spatstat')"           # [not win]
    - "\"%R%\" -e \"library('spatstat')\""  # [win]

about:
  home: http://www.spatstat.org
  dev_url: https://github.com/spatstat/spatstat
  license: GPL-2.0-or-later
  summary: Comprehensive open-source toolbox for analysing Spatial Point Patterns. Focused mainly on two-dimensional point patterns, including multitype/marked points, in any spatial region. Also supports three-dimensional point patterns, space-time point patterns in any number of dimensions, point patterns on a linear network,
    and patterns of other geometrical objects. Supports spatial covariate data such as pixel images. Contains over 2000 functions for plotting spatial data, exploratory data analysis, model-fitting, simulation, spatial sampling, model diagnostics, and formal inference. Data types include point patterns, line segment patterns,
    spatial windows, pixel images, tessellations, and linear networks. Exploratory methods include quadrat counts, K-functions and their simulation envelopes, nearest neighbour distance and empty space statistics, Fry plots, pair correlation function, kernel smoothed intensity, relative risk estimation with cross-validated
    bandwidth selection, mark correlation functions, segregation indices, mark dependence diagnostics, and kernel estimates of covariate effects. Formal hypothesis tests of random pattern (chi-squared, Kolmogorov-Smirnov, Monte Carlo, Diggle-Cressie-Loosmore-Ford, Dao-Genton, two-stage Monte Carlo) and tests for covariate
    effects (Cox-Berman-Waller-Lawson, Kolmogorov-Smirnov, ANOVA) are also supported. Parametric models can be fitted to point pattern data using the functions ppm(), kppm(), slrm(), dppm() similar to glm(). Types of models include Poisson, Gibbs and Cox point processes, Neyman-Scott cluster processes, and determinantal
    point processes. Models may involve dependence on covariates, inter-point interaction, cluster formation and dependence on marks. Models are fitted by maximum likelihood, logistic regression, minimum contrast, and composite likelihood methods. A model can be fitted to a list of point patterns (replicated point pattern
    data) using the function mppm(). The model can include random effects and fixed effects depending on the experimental design, in addition to all the features listed above. Fitted point process models can be simulated, automatically. Formal hypothesis tests of a fitted model are supported (likelihood ratio test, analysis
    of deviance, Monte Carlo tests) along with basic tools for model selection (stepwise(), AIC()) and variable selection (sdr). Tools for validating the fitted model include simulation envelopes, residuals, residual plots and Q-Q plots, leverage and influence diagnostics, partial residuals, and added variable plots.
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3

extra:
  recipe-maintainers:
    - conda-forge/r
    - ocefpaf
